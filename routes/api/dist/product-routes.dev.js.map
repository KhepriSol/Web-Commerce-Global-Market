{"version":3,"sources":["product-routes.js"],"names":["router","require","Router","Product","Category","Tag","ProductTag","get","req","res","findAll","attributes","include","model","dbProductData","json","console","log","status","findOne","where","id","params","message","post","create","body","then","product","tagIds","length","productTagIdArr","map","tag_id","product_id","bulkCreate","productTagIds","err","put","update","productTags","newProductTags","filter","includes","productTagsToRemove","Promise","all","destroy","updatedProductTags","module","exports"],"mappings":"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","sourcesContent":["const router = require('express').Router();\nconst { Product, Category, Tag, ProductTag } = require('../../models');\n\n// The `/api/products` endpoint\n\n// get all products\nrouter.get('/', async (req, res) => {\n  try {\n  const dbProductData = await Product.findAll({\n  attributes: ['id', 'product_name', 'price', 'stock'],\n  include: [\n  {\n  model: Category,\n  attributes: ['category_name']\n  },\n  {\n  model: Tag,\n  attributes: ['tag_name']\n  }\n  ]\n  });\n  res.json(dbProductData);\n  } catch (err) {\n  console.log(err);\n  res.status(500).json(err);\n  }\n  });\n  \n  // get one product\n  router.get('/:id', async (req, res) => {\n  try {\n  const dbProductData = await Product.findOne({\n  where: {\n  id: req.params.id\n  },\n  attributes: ['id', 'product_name', 'price', 'stock'],\n  include: [\n  {\n  model: Category,\n  attributes: ['category_name']\n  },\n  {\n  model: Tag,\n  attributes: ['tag_name']\n  }\n  ]\n  });\n  if (!dbProductData) {\n  res.status(404).json({message: 'No product found with this id'});\n  return;\n  }\n  res.json(dbProductData);\n  } catch (err) {\n  console.log(err);\n  res.status(500).json(err);\n  }\n  });\n\n// create new product\nrouter.post('/', (req, res) => {\n  /* req.body should look like this...\n    {\n      product_name: \"Basketball\",\n      price: 200.00,\n      stock: 3,\n      tagIds: [1, 2, 3, 4]\n    }\n  */\n  Product.create(req.body)\n    .then((product) => {\n      // if there's product tags, we need to create pairings to bulk create in the ProductTag model\n      if (req.body.tagIds.length) {\n        const productTagIdArr = req.body.tagIds.map((tag_id) => {\n          return {\n            product_id: product.id,\n            tag_id,\n          };\n        });\n        return ProductTag.bulkCreate(productTagIdArr);\n      }\n      // if no product tags, just respond\n      res.status(200).json(product);\n    })\n    .then((productTagIds) => res.status(200).json(productTagIds))\n    .catch((err) => {\n      console.log(err);\n      res.status(400).json(err);\n    });\n});\n\n// update product\nrouter.put('/:id', (req, res) => {\n  // update product data\n  Product.update(req.body, {\n    where: {\n      id: req.params.id,\n    },\n  })\n    .then((product) => {\n      // find all associated tags from ProductTag\n      return ProductTag.findAll({ where: { product_id: req.params.id } });\n    })\n    .then((productTags) => {\n      // get list of current tag_ids\n      const productTagIds = productTags.map(({ tag_id }) => tag_id);\n      // create filtered list of new tag_ids\n      const newProductTags = req.body.tagIds\n        .filter((tag_id) => !productTagIds.includes(tag_id))\n        .map((tag_id) => {\n          return {\n            product_id: req.params.id,\n            tag_id,\n          };\n        });\n      // figure out which ones to remove\n      const productTagsToRemove = productTags\n        .filter(({ tag_id }) => !req.body.tagIds.includes(tag_id))\n        .map(({ id }) => id);\n\n      // run both actions\n      return Promise.all([\n        ProductTag.destroy({ where: { id: productTagsToRemove } }),\n        ProductTag.bulkCreate(newProductTags),\n      ]);\n    })\n    .then((updatedProductTags) => res.json(updatedProductTags))\n    .catch((err) => {\n      // console.log(err);\n      res.status(400).json(err);\n    });\n});\n\nrouter.delete('/:id', (req, res) => {\n  // delete one product by its `id` value\n});\n\nmodule.exports = router;\n"],"file":"product-routes.dev.js"}