{"version":3,"sources":["product-routes.js"],"names":["router","require","Router","Product","Category","Tag","ProductTag","req","dbProductData","regeneratorRuntime","async","_context","prev","next","awrap","findAll","attributes","include","get","model","sent","t0","stop","res","_context2","findOne","json","status","message","abrupt","console","log","post","body","tagIds","length","productTagIdArr","map","tag_id","product","id","bulkCreate","then","productTagIds","err","put","update","where","product_id","params","productTags","_ref","newProductTags","filter","includes","productTagsToRemove","_ref2","destroy","updatedProductTags"],"mappings":"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","file":"product-routes.min.js","sourcesContent":["const router = require('express').Router();\nconst { Product, Category, Tag, ProductTag } = require('../../models');\n\n// The `/api/products` endpoint\n\n// get all products\nrouter.get('/', async (req, res) => {\n  try {\n  const dbProductData = await Product.findAll({\n  attributes: ['id', 'product_name', 'price', 'stock'],\n  include: [\n  {\n  model: Category,\n  attributes: ['category_name']\n  },\n  {\n  model: Tag,\n  attributes: ['tag_name']\n  }\n  ]\n  });\n  res.json(dbProductData);\n  } catch (err) {\n  console.log(err);\n  res.status(500).json(err);\n  }\n  });\n  \n  // get one product\n  router.get('/:id', async (req, res) => {\n  try {\n  const dbProductData = await Product.findOne({\n  where: {\n  id: req.params.id\n  },\n  attributes: ['id', 'product_name', 'price', 'stock'],\n  include: [\n  {\n  model: Category,\n  attributes: ['category_name']\n  },\n  {\n  model: Tag,\n  attributes: ['tag_name']\n  }\n  ]\n  });\n  if (!dbProductData) {\n  res.status(404).json({message: 'No product found with this id'});\n  return;\n  }\n  res.json(dbProductData);\n  } catch (err) {\n  console.log(err);\n  res.status(500).json(err);\n  }\n  });\n\n// create new product\nrouter.post('/', (req, res) => {\n  /* req.body should look like this...\n    {\n      product_name: \"Basketball\",\n      price: 200.00,\n      stock: 3,\n      tagIds: [1, 2, 3, 4]\n    }\n  */\n  Product.create(req.body)\n    .then((product) => {\n      // if there's product tags, we need to create pairings to bulk create in the ProductTag model\n      if (req.body.tagIds.length) {\n        const productTagIdArr = req.body.tagIds.map((tag_id) => {\n          return {\n            product_id: product.id,\n            tag_id,\n          };\n        });\n        return ProductTag.bulkCreate(productTagIdArr);\n      }\n      // if no product tags, just respond\n      res.status(200).json(product);\n    })\n    .then((productTagIds) => res.status(200).json(productTagIds))\n    .catch((err) => {\n      console.log(err);\n      res.status(400).json(err);\n    });\n});\n\n// update product\nrouter.put('/:id', (req, res) => {\n  // update product data\n  Product.update(req.body, {\n    where: {\n      id: req.params.id,\n    },\n  })\n    .then((product) => {\n      // find all associated tags from ProductTag\n      return ProductTag.findAll({ where: { product_id: req.params.id } });\n    })\n    .then((productTags) => {\n      // get list of current tag_ids\n      const productTagIds = productTags.map(({ tag_id }) => tag_id);\n      // create filtered list of new tag_ids\n      const newProductTags = req.body.tagIds\n        .filter((tag_id) => !productTagIds.includes(tag_id))\n        .map((tag_id) => {\n          return {\n            product_id: req.params.id,\n            tag_id,\n          };\n        });\n      // figure out which ones to remove\n      const productTagsToRemove = productTags\n        .filter(({ tag_id }) => !req.body.tagIds.includes(tag_id))\n        .map(({ id }) => id);\n\n      // run both actions\n      return Promise.all([\n        ProductTag.destroy({ where: { id: productTagsToRemove } }),\n        ProductTag.bulkCreate(newProductTags),\n      ]);\n    })\n    .then((updatedProductTags) => res.json(updatedProductTags))\n    .catch((err) => {\n      // console.log(err);\n      res.status(400).json(err);\n    });\n});\n\nrouter.delete('/:id', (req, res) => {\n  // delete one product by its `id` value\n});\n\nmodule.exports = router;\n"]}