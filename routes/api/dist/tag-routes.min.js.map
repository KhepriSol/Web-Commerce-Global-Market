{"version":3,"sources":["tag-routes.js"],"names":["router","require","Router","Category","Product","Tag","get","req","res","productData","regeneratorRuntime","async","_context","prev","next","awrap","findAll","include","model","attributes","sent","json","t0","console","error","status","message","stop","_context2","findByPk","params","id","abrupt","post","_context3","create","body","put","_ref","_ref2","_context4","update","where","_slicedToArray","_context5","destroy","module","exports"],"mappings":"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","file":"tag-routes.min.js","sourcesContent":["const router = require('express').Router();\nconst { Category, Product, Tag } = require('../../models');\n\n// GET all products with their categories and tags\nrouter.get('/', async (req, res) => {\n  try {\n    const productData = await Product.findAll({\n      include: [\n        {\n          model: Category,\n          attributes: ['category_name'],\n        },\n        {\n          model: Tag,\n          attributes: ['tag_name'],\n        },\n      ],\n    });\n    res.status(200).json(productData);\n  } catch (err) {\n    console.error(err);\n    res.status(500).json({ message: 'Failed to retrieve products' });\n  }\n});\n\n// GET a single product with its category and tags\nrouter.get('/:id', async (req, res) => {\n  try {\n    const productData = await Product.findByPk(req.params.id, {\n      include: [\n        {\n          model: Category,\n          attributes: ['category_name'],\n        },\n        {\n          model: Tag,\n          attributes: ['tag_name'],\n        },\n      ],\n    });\n    if (!productData) {\n      res.status(404).json({ message: 'No product found with this id' });\n      return;\n    }\n    res.status(200).json(productData);\n  } catch (err) {\n    console.error(err);\n    res.status(500).json({ message: 'Failed to retrieve the product' });\n  }\n});\n\n// CREATE a new product\nrouter.post('/', async (req, res) => {\n  try {\n    const productData = await Product.create(req.body);\n    res.status(200).json(productData);\n  } catch (err) {\n    console.error(err);\n    res.status(500).json({ message: 'Failed to create the product' });\n  }\n});\n\n// UPDATE a product by its id\nrouter.put('/:id', async (req, res) => {\n  try {\n    const [updatedRows] = await Product.update(req.body, {\n      where: {\n        id: req.params.id,\n      },\n    });\n    if (!updatedRows) {\n      res.status(404).json({ message: 'No product found with this id' });\n      return;\n    }\n    res.status(200).json({ message: 'Product updated successfully' });\n  } catch (err) {\n    console.error(err);\n    res.status(500).json({ message: 'Failed to update the product' });\n  }\n});\n\n// DELETE a product by its id\nrouter.delete('/:id', async (req, res) => {\n  try {\n    const deletedRows = await Product.destroy({\n      where: {\n        id: req.params.id,\n      },\n    });\n    if (!deletedRows) {\n      res.status(404).json({ message: 'No product found with this id' });\n      return;\n    }\n    res.status(200).json({ message: 'Product deleted successfully' });\n  } catch (err) {\n    console.error(err);\n    res.status(500).json({ message: 'Failed to delete the product' });\n  }\n});\n\nmodule.exports = router;\n"]}