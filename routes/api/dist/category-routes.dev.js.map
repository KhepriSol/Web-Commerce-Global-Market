{"version":3,"sources":["category-routes.js"],"names":["express","require","router","Router","Category","Product","get","req","res","findAll","include","model","attributes","dbCatData","status","json","message","console","error","findOne","where","id","params","post","create","category_name","body","put","update","destroy","module","exports"],"mappings":"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","sourcesContent":["const express = require('express');\nconst router = express.Router();\nconst { Category, Product } = require('../../models');\n\n// GET all categories, including associated products\nrouter.get('/', async (req, res) => {\n  try {\n    const dbCatData = await Category.findAll({\n      include: [\n        { \n          model: Product,\n          attributes: ['id', 'product_name', 'price', 'stock', 'category_id']\n        }\n      ]\n    });\n    if (!dbCatData) {\n      res.status(404).json({ message: 'No categories found' });\n      return;\n    }\n    res.json(dbCatData);\n  } catch (err) {\n    console.error(err);\n    res.status(500).json({ message: 'Server Error' });\n  }\n});\n\n// GET a category by id, including associated products\nrouter.get('/:id', async (req, res) => {\n  try {\n    const dbCatData = await Category.findOne({\n      where: {\n        id: req.params.id\n      },\n      include: [\n        { \n          model: Product,\n          attributes: ['id', 'product_name', 'price', 'stock', 'category_id']\n        }\n      ]\n    });\n    if (!dbCatData) {\n      res.status(404).json({ message: 'No categories found' });\n      return;\n    }\n    res.json(dbCatData);\n  } catch (err) {\n    console.error(err);\n    res.status(500).json({ message: 'Server Error' });\n  }\n});\n\n// POST a new category\nrouter.post('/', async (req, res) => {\n  try {\n    const dbCatData = await Category.create({\n      category_name: req.body.category_name\n    });\n    res.json(dbCatData);\n  } catch (err) {\n    console.error(err);\n    res.status(500).json({ message: 'Server Error' });\n  }\n});\n\n// PUT update a category by id\nrouter.put('/:id', async (req, res) => {\n  try {\n    const dbCatData = await Category.update(req.body, {\n      where: {\n        id: req.params.id\n      }\n    });\n    if (!dbCatData[0]) {\n      res.status(404).json({ message: 'No category found with this id' });\n      return;\n    }\n    res.json({ message: 'Category updated' });\n  } catch (err) {\n    console.error(err);\n    res.status(500).json({ message: 'Server Error' });\n  }\n});\n\n// DELETE a category by id\nrouter.delete('/:id', async (req, res) => {\n  try {\n    const dbCatData = await Category.destroy({\n      where: {\n        id: req.params.id\n      }\n    });\n    if (!dbCatData) {\n      res.status(404).json({ message: 'No category found with that id' });\n      return;\n    }\n    res.json({ message: 'Category deleted' });\n  } catch (err) {\n    console.error(err);\n    res.status(500).json({ message: 'Server Error' });\n  }\n});\n\nmodule.exports = router;\n"],"file":"category-routes.dev.js"}