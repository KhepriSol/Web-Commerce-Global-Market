{"version":3,"sources":["category-routes.js"],"names":["express","require","router","Router","get","req","res","dbCatData","regeneratorRuntime","async","_context","prev","next","awrap","Category","findAll","Product","model","attributes","sent","status","json","message","abrupt","t0","stop","_context2","findOne","where","id","params","include","console","error","post","_context3","create","category_name","body","put","_context4","update","_context5","destroy","module","exports"],"mappings":"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","file":"category-routes.min.js","sourcesContent":["const express = require('express');\nconst router = express.Router();\nconst { Category, Product } = require('../../models');\n\n// GET all categories, including associated products\nrouter.get('/', async (req, res) => {\n  try {\n    const dbCatData = await Category.findAll({\n      include: [\n        { \n          model: Product,\n          attributes: ['id', 'product_name', 'price', 'stock', 'category_id']\n        }\n      ]\n    });\n    if (!dbCatData) {\n      res.status(404).json({ message: 'No categories found' });\n      return;\n    }\n    res.json(dbCatData);\n  } catch (err) {\n    console.error(err);\n    res.status(500).json({ message: 'Server Error' });\n  }\n});\n\n// GET a category by id, including associated products\nrouter.get('/:id', async (req, res) => {\n  try {\n    const dbCatData = await Category.findOne({\n      where: {\n        id: req.params.id\n      },\n      include: [\n        { \n          model: Product,\n          attributes: ['id', 'product_name', 'price', 'stock', 'category_id']\n        }\n      ]\n    });\n    if (!dbCatData) {\n      res.status(404).json({ message: 'No categories found' });\n      return;\n    }\n    res.json(dbCatData);\n  } catch (err) {\n    console.error(err);\n    res.status(500).json({ message: 'Server Error' });\n  }\n});\n\n// POST a new category\nrouter.post('/', async (req, res) => {\n  try {\n    const dbCatData = await Category.create({\n      category_name: req.body.category_name\n    });\n    res.json(dbCatData);\n  } catch (err) {\n    console.error(err);\n    res.status(500).json({ message: 'Server Error' });\n  }\n});\n\n// PUT update a category by id\nrouter.put('/:id', async (req, res) => {\n  try {\n    const dbCatData = await Category.update(req.body, {\n      where: {\n        id: req.params.id\n      }\n    });\n    if (!dbCatData[0]) {\n      res.status(404).json({ message: 'No category found with this id' });\n      return;\n    }\n    res.json({ message: 'Category updated' });\n  } catch (err) {\n    console.error(err);\n    res.status(500).json({ message: 'Server Error' });\n  }\n});\n\n// DELETE a category by id\nrouter.delete('/:id', async (req, res) => {\n  try {\n    const dbCatData = await Category.destroy({\n      where: {\n        id: req.params.id\n      }\n    });\n    if (!dbCatData) {\n      res.status(404).json({ message: 'No category found with that id' });\n      return;\n    }\n    res.json({ message: 'Category deleted' });\n  } catch (err) {\n    console.error(err);\n    res.status(500).json({ message: 'Server Error' });\n  }\n});\n\nmodule.exports = router;\n"]}