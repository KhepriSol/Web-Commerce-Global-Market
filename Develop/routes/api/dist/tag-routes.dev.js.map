{"version":3,"sources":["tag-routes.js"],"names":["router","require","Router","Category","Product","Tag","get","req","res","findAll","include","model","attributes","productData","status","json","console","error","message","findByPk","params","id","post","create","body","put","update","where","updatedRows","destroy","deletedRows","module","exports"],"mappings":"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","sourcesContent":["const router = require('express').Router();\nconst { Category, Product, Tag } = require('../../models');\n\n// GET all products with their categories and tags\nrouter.get('/', async (req, res) => {\n  try {\n    const productData = await Product.findAll({\n      include: [\n        {\n          model: Category,\n          attributes: ['category_name'],\n        },\n        {\n          model: Tag,\n          attributes: ['tag_name'],\n        },\n      ],\n    });\n    res.status(200).json(productData);\n  } catch (err) {\n    console.error(err);\n    res.status(500).json({ message: 'Failed to retrieve products' });\n  }\n});\n\n// GET a single product with its category and tags\nrouter.get('/:id', async (req, res) => {\n  try {\n    const productData = await Product.findByPk(req.params.id, {\n      include: [\n        {\n          model: Category,\n          attributes: ['category_name'],\n        },\n        {\n          model: Tag,\n          attributes: ['tag_name'],\n        },\n      ],\n    });\n    if (!productData) {\n      res.status(404).json({ message: 'No product found with this id' });\n      return;\n    }\n    res.status(200).json(productData);\n  } catch (err) {\n    console.error(err);\n    res.status(500).json({ message: 'Failed to retrieve the product' });\n  }\n});\n\n// CREATE a new product\nrouter.post('/', async (req, res) => {\n  try {\n    const productData = await Product.create(req.body);\n    res.status(200).json(productData);\n  } catch (err) {\n    console.error(err);\n    res.status(500).json({ message: 'Failed to create the product' });\n  }\n});\n\n// UPDATE a product by its id\nrouter.put('/:id', async (req, res) => {\n  try {\n    const [updatedRows] = await Product.update(req.body, {\n      where: {\n        id: req.params.id,\n      },\n    });\n    if (!updatedRows) {\n      res.status(404).json({ message: 'No product found with this id' });\n      return;\n    }\n    res.status(200).json({ message: 'Product updated successfully' });\n  } catch (err) {\n    console.error(err);\n    res.status(500).json({ message: 'Failed to update the product' });\n  }\n});\n\n// DELETE a product by its id\nrouter.delete('/:id', async (req, res) => {\n  try {\n    const deletedRows = await Product.destroy({\n      where: {\n        id: req.params.id,\n      },\n    });\n    if (!deletedRows) {\n      res.status(404).json({ message: 'No product found with this id' });\n      return;\n    }\n    res.status(200).json({ message: 'Product deleted successfully' });\n  } catch (err) {\n    console.error(err);\n    res.status(500).json({ message: 'Failed to delete the product' });\n  }\n});\n\nmodule.exports = router;\n"],"file":"tag-routes.dev.js"}